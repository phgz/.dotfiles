``                        => go to last jump position
`.                        => go to last inserted text position
`<                        => cursor to the start of the highlighted area
12|                       => go to column 12
12:                       => :.,.+11
&                         => repeat last :s
@:                        => repeat the previous ":" command N times

<C-r>=expand('%:p:h')     => insert directory of current file
<C-r>=repeat('-', 9)      => insert result of expr
<C-g>                     => show ruler
<C-l>                     => clear search highlight
<C-{o,i}>                 => go to older/newer cursor position in jump list
<Ctrl-]>                  => jump to tag definition
<CTRL-W>^                 => split current window and edit alternate file

/abc\C                    => force case sensitivity
:%!                       => filter all lines through the {filter} command
:*                        => :'<,'>
:=                        => echo last line number
:s/a/&b                   => append b to a
:s/\%Va/b                 => apply substitution only in previous visual range
:s/\%>.ca/b               => apply substitution only after the cursor col
:s/.\{-}/b                => non-greedy `*` equivalent
:s/.\zea/b                => until `a` (`a` not included in match, \zs for match start)
:s/\_./b                  => any single character including newline
:s/\(a\)/\=f(submatch(1)) => apply function `f` to submatch
:s/\d\+/\=submatch(0)+1   => increment match of 1 unit
:s/p/\=submatch(0) ==# "p" ? "b" : "B" => check case of original match
:g/p/s/a/b                => apply substitution only where `p` pattern appears
:g!/p/s/a/b               => apply substitution only where `p` pattern does not appears
:'<,'>g!/^$/exe "norm! f{vi}^[" | s/\%V\S\+/&, => apply to non-empty lines, chain commands with |
:'<,'>g/./exe "norm! yf(" | %s//utils.& => for each line in range, yank a part, then global substitute that selection
:'<,'>g/./if line(".") % 2 == 0 | {cmd} => apply command only to even lines
:<C-v>                    => insert literal
:cd %:h                   => change to the directory of the current file
:write ++p                => creates parent directories
:<C-R>_<C-W>              => insert the Word under the cursor.
:<C-f>                    => open command-line window
:ascii                    => print ascii value of char under cursor

cgn                       => changes the text of the next match
gJ                        => join without space
gf                        => start editing the file whose name is under the cursor
gi                        => Start insert mode where it was stopped last time
gI                        => Insert at column 1
g{j,k}                    => Go down/up by one screen line
gUU                       => Make line uppercase (`guu` for lowercase)
g{u,U}<motion>            => Make <motion> lowercase/uppercase
g?                        => encode text ROT13
g&                        => repeat last ":s" on all lines
g{#,*}                    => search under cursor, no word boundary
g{-,+}                    => older/newer text state
g{,,;}                    => go to next/previous position in changelist
g<C-g>                    => show stats
g<C-{a,x}>                => increment/decrement sequentially
g{0,^,$}                  => Go to first/first non-blank/last char on screen line
g{p,P}                    => same as `p` or `P`, but do not move cursor
g{n,N}                    => select next/prev search match

2yi"                      => also select the surrounding quotes, but not the following white space
dvb                       => make the motion inclusive (v toggles inclusiveness of last char)
yVaf                      => force operator to work linewise
dVM                       => deletes linewise from the cursor position to the middle line included
d<C-V>j                   => deletes the character under the cursor and the character below the cursor
v_gv                      => toggle between current and last visual selection
v_{o,O}                   => go to start/end of visual selection
v_J                       => join the highlighted lines
