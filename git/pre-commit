#!/usr/bin/env python

import os
import re
import subprocess
import sys
from contextlib import contextmanager
from pathlib import Path
from typing import Iterator, Tuple


def exit_with_error():
    print("Not committing.")
    print("Don't forget to add the modified file to the commit.")
    print("To bypass this hook, run: git commit --no-verify")
    sys.exit(1)


@contextmanager
def libraries(conda_venv) -> Iterator[Tuple[Path, Path]]:
    """
    Temporarilly append the environment libraries to the system path to make them
    available to import.

    Yields
    ------
    Tuple[Path, Path]
        Path of the project's python site-packages and venv's bin.
    """
    venv_bin = conda_venv / "bin"
    venv_lib = conda_venv / "lib"
    pyfolder = next(filter(lambda f: f.startswith("python"), os.listdir(venv_lib)))
    site_packages = venv_lib / pyfolder / "site-packages"
    sys.path.insert(0, str(site_packages))
    old_path = os.environ["PATH"]
    os.environ["PATH"] = f"{venv_bin}:{os.environ['PATH']}"

    try:
        yield (site_packages, venv_bin)

    finally:
        sys.path.remove(str(site_packages))
        os.environ["PATH"] = old_path


conda_venv = Path.home() / ".miniconda3/envs/neovim"

with libraries(conda_venv):
    import git
    import toml

repo = git.Repo(".", search_parent_directories=True)
project_root = repo.working_tree_dir
index = [item for item in repo.index.diff("HEAD")]

# ------------------------------------------------------------------------------#
#                            Check for breakpoints                              #
# ------------------------------------------------------------------------------#

for item in index:
    code = repo.git.show(item.a_blob)
    match = re.search(r"breakpoint\(\)", code, re.S)

    if match:
        print("Found the presence of breakpoints in the code.")
        exit_with_error()

# ------------------------------------------------------------------------------#
#                              Check for version                                #
# ------------------------------------------------------------------------------#

metadata_files = ["setup.py", "pyproject.toml"]
path = lambda file: os.path.join(project_root, file)
current_metadata_path = next(filter(lambda p: os.path.exists(p), map(path, metadata_files)))
metadata_file = current_metadata_path.split("/")[-1]

HEAD = next(ref for ref in repo.remotes.origin.refs if ref.name == "origin/HEAD")
default_branch = HEAD.ref.name.split("/")[-1]

remote_metadata_path = repo.remotes.origin.fetch(default_branch)[0].commit.tree[metadata_file]

with open(current_metadata_path, "r") as f:
    current_content = f.read()

remote_content = repo.git.show(remote_metadata_path)

not_staged = [item.a_path for item in repo.index.diff(None)]

find_version = dict(
    zip(
        metadata_files,
        [
            lambda s: re.search(r"version\s*=\s*[\'|\"](.*)[\"|\']", s).group(1),
            lambda s: toml.loads(s)["tool"]["poetry"]["version"],
        ],
    )
)

versions = [
    find_version[metadata_file](content) for content in [current_content, remote_content]
]

parsed_current, parsed_remote = [list(map(int, v.split("."))) for v in versions]

if parsed_current <= parsed_remote or metadata_file in not_staged:
    print(repo.active_branch.name + "'s version is not greater than remote master's.")
    exit_with_error()

# ------------------------------------------------------------------------------#
#      Check for python unused imports/variables and expand star imports       #
# ------------------------------------------------------------------------------#

autoflake_opts = [
    "--in-place",
    "--recursive",
    "--expand-star-imports",
    "--remove-all-unused-imports",
    "--ignore-init-module-imports",
    "--remove-unused-variables",
    "--verbose",
]

to_process = [
    item.a_path for item in index if item.a_path.endswith(".py") and Path(item.a_path).exists()
]

if to_process:
    with libraries(conda_venv):
        out = subprocess.run(
            ["autoflake"] + autoflake_opts + to_process,
            check=True,
            cwd=project_root,
            capture_output=True,
        )

    if out.stderr:
        mod_files = [file.split()[1] for file in out.stderr.decode().split("\n")[:-1]]

        print(
            "Autoflakes found unused imports or variables in the code. Check for the following modified files:"
        )
        print("\n".join(mod_files) + "\n")
        exit_with_error()
